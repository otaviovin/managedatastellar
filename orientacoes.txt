Code that interacts with the Stellar blockchain to add and query arbitrary data stored in a specific account.
It uses the Stellar SDK to create transactions on the Stellar network, and the Horizon API to query account information.

- requests: Used to make HTTP requests — in this case, to fetch account data from the Horizon API.
- stellar_sdk: A set of classes and functions for interacting with the Stellar network.
- Server: Class used to connect to the Horizon server.
- Keypair: Class for generating public/private key pairs used for transaction authentication.
- TransactionBuilder: Class that enables you to construct and sign transactions.
- Network: Contains the passphrases required to identify which network (Testnet or Mainnet) is being used.

*****Function add_data_to_account*****

1. Defining the secret key and generating the key pair

The secret key is the private key that allows a user to sign transactions.
The Keypair.from_secret(secret) function generates both the public key (used to identify the account) and the private key (used to sign transactions).
Server creates a connection to the Horizon server, which acts as the interface between your code and the Stellar blockchain.
Here we use the Testnet URL (horizon-testnet.stellar.org), a testing network ideal for avoiding real-world transaction costs and risks.

2. Creating the operation

The ManageData operation allows you to add or modify arbitrary data on the Stellar blockchain.
data_name is the key (name) of the data, and data_value is the value associated with that key.
The source parameter specifies the public key of the account initiating the transaction — in this case, the account generated from the provided secret key.

3. Loading the destination account

The method load_account(account_id) retrieves the details of the destination account using the given account ID.
It returns the account’s current state (balance, pending operations, etc.).

4. Building the transaction

TransactionBuilder is used to construct the Stellar transaction.
source_account defines the account that will sign and pay for the transaction.
network_passphrase is a string that identifies the network you are using — for the Testnet, it is Network.TESTNET_NETWORK_PASSPHRASE.

5. Signing the transaction

The transaction must be signed with the private key of the source account to ensure it was authorized by the account owner.

6. Submitting the transaction

The signed transaction is submitted to the Horizon server, which processes it on the Stellar blockchain.
The result of the transaction (success or failure) is printed in the terminal.

*****Function query_data*****

1. Building the Horizon API URL:

The URL is constructed to access account data through Horizon.
It replaces account_id with the ID of the account you want to query and data_name with the name of the key being queried.

2. Sending a GET request:

The function requests.get(url) sends an HTTP GET request to the Horizon server, which returns the data associated with the specified data_name key for that account.

3. Checking the response:

If the request is successful (status_code == 200), the returned data is converted from JSON into a Python dictionary using response.json().
If the request fails, an error message is displayed along with the HTTP status code.

*****Code Functionality Summary*****

Adding Data:

The code allows you to store arbitrary key-value pairs in a Stellar account by creating and signing a transaction that includes a ManageData operation.

Querying Data:

You can query the data stored in a Stellar account by accessing the Horizon API, which returns the data associated with a specific key.

This code demonstrates how to interact with the Stellar blockchain to store and access arbitrary data — a capability that can be very useful for decentralized applications (dApps) or other blockchain-based solutions that need to record data on-chain.

Documentos para verificação:

ManageData operation – stellar_sdk -> https://stellar-sdk.readthedocs.io/en/latest/_modules/stellar_sdk/operation/manage_data.html
Manage Data – Stellar Developers Documentation -> https://developers.stellar.org/docs/learn/fundamentals/transactions/list-of-operations#manage-data
Stellar Expert – Testnet Explorer -> https://stellar.expert/explorer/testnet


